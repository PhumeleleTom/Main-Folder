{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Downloads\\\\Main-folder\\\\frontend\\\\src\\\\pages\\\\Home.tsx\";\nimport React from 'react';\nimport { getTasks } from '../api/TaskService';\nimport { Task } from '../components/Task';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  const work = false;\n  const completed = false;\n  const TaskList = async props => {\n    var _data$content3;\n    const {\n      data\n    } = await getTasks();\n    if (props.work) {\n      var _data$content;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [(data === null || data === void 0 ? void 0 : (_data$content = data.content) === null || _data$content === void 0 ? void 0 : _data$content.length) > 0 && data.map((currentTask, key) => {\n          if (!currentTask.taskCompleted) {\n            return /*#__PURE__*/_jsxDEV(Task, {\n              task: currentTask\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 26\n            }, this);\n          }\n        }), \";\"]\n      }, void 0, true);\n    }\n    if (props.completed) {\n      var _data$content2;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: (data === null || data === void 0 ? void 0 : (_data$content2 = data.content) === null || _data$content2 === void 0 ? void 0 : _data$content2.length) > 0 && data.map((currentTask, key) => {\n          if (currentTask.taskCompleted) {\n            return /*#__PURE__*/_jsxDEV(Task, {\n              task: currentTask\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 26\n            }, this);\n          }\n        })\n      }, void 0, false);\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: (data === null || data === void 0 ? void 0 : (_data$content3 = data.content) === null || _data$content3 === void 0 ? void 0 : _data$content3.length) > 0 && data.map((currentTask, key) => {\n        return /*#__PURE__*/_jsxDEV(Task, {\n          task: currentTask\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false);\n  };\n};\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","getTasks","Task","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","work","completed","TaskList","props","_data$content3","data","_data$content","children","content","length","map","currentTask","key","taskCompleted","task","fileName","_jsxFileName","lineNumber","columnNumber","_data$content2","_c","$RefreshReg$"],"sources":["C:/Users/User/Downloads/Main-folder/frontend/src/pages/Home.tsx"],"sourcesContent":["import React from 'react'\r\nimport { deleteTask, saveTask, getTask, updateTask, getTasks } from '../api/TaskService';\r\nimport { TaskInterface } from '../interface/TaskInterface';\r\nimport { Task } from '../components/Task';\r\n\r\nexport const Home = () => {\r\n    const work: boolean = false;\r\n    const completed: boolean = false;\r\n\r\n    interface Props{\r\n        work: boolean;\r\n        completed: boolean;\r\n      }\r\n      \r\n      const TaskList = async (props: Props) => {\r\n        const { data } = await getTasks();\r\n      \r\n        if(props.work){\r\n          return (\r\n            <>\r\n              {data?.content?.length > 0 && data.map((currentTask: TaskInterface, key:any) => {\r\n                if(!currentTask.taskCompleted){\r\n                  return <Task task={currentTask} key={key}/>\r\n                }\r\n              })};\r\n            </>\r\n          )\r\n        }\r\n        if(props.completed){\r\n          return (\r\n            <>\r\n              {data?.content?.length > 0 && data.map((currentTask: TaskInterface, key:any) => {\r\n                if(currentTask.taskCompleted){\r\n                  return <Task task={currentTask} key={key} />\r\n                }\r\n              })}\r\n            </>\r\n          )\r\n        }\r\n          return (\r\n          <>\r\n            {data?.content?.length > 0 && data.map((currentTask: TaskInterface, key:any) => {\r\n              return(\r\n                <Task task={currentTask} key={key} />\r\n              ); \r\n            })}\r\n          </>\r\n        )}\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAoDC,QAAQ,QAAQ,oBAAoB;AAExF,SAASC,IAAI,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1C,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACtB,MAAMC,IAAa,GAAG,KAAK;EAC3B,MAAMC,SAAkB,GAAG,KAAK;EAO9B,MAAMC,QAAQ,GAAG,MAAOC,KAAY,IAAK;IAAA,IAAAC,cAAA;IACvC,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMZ,QAAQ,CAAC,CAAC;IAEjC,IAAGU,KAAK,CAACH,IAAI,EAAC;MAAA,IAAAM,aAAA;MACZ,oBACEV,OAAA,CAAAE,SAAA;QAAAS,QAAA,GACG,CAAAF,IAAI,aAAJA,IAAI,wBAAAC,aAAA,GAAJD,IAAI,CAAEG,OAAO,cAAAF,aAAA,uBAAbA,aAAA,CAAeG,MAAM,IAAG,CAAC,IAAIJ,IAAI,CAACK,GAAG,CAAC,CAACC,WAA0B,EAAEC,GAAO,KAAK;UAC9E,IAAG,CAACD,WAAW,CAACE,aAAa,EAAC;YAC5B,oBAAOjB,OAAA,CAACF,IAAI;cAACoB,IAAI,EAAEH;YAAY,GAAMC,GAAG;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAC7C;QACF,CAAC,CAAC,EAAC,GACL;MAAA,eAAE,CAAC;IAEP;IACA,IAAGf,KAAK,CAACF,SAAS,EAAC;MAAA,IAAAkB,cAAA;MACjB,oBACEvB,OAAA,CAAAE,SAAA;QAAAS,QAAA,EACG,CAAAF,IAAI,aAAJA,IAAI,wBAAAc,cAAA,GAAJd,IAAI,CAAEG,OAAO,cAAAW,cAAA,uBAAbA,cAAA,CAAeV,MAAM,IAAG,CAAC,IAAIJ,IAAI,CAACK,GAAG,CAAC,CAACC,WAA0B,EAAEC,GAAO,KAAK;UAC9E,IAAGD,WAAW,CAACE,aAAa,EAAC;YAC3B,oBAAOjB,OAAA,CAACF,IAAI;cAACoB,IAAI,EAAEH;YAAY,GAAMC,GAAG;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC;UAC9C;QACF,CAAC;MAAC,gBACF,CAAC;IAEP;IACE,oBACAtB,OAAA,CAAAE,SAAA;MAAAS,QAAA,EACG,CAAAF,IAAI,aAAJA,IAAI,wBAAAD,cAAA,GAAJC,IAAI,CAAEG,OAAO,cAAAJ,cAAA,uBAAbA,cAAA,CAAeK,MAAM,IAAG,CAAC,IAAIJ,IAAI,CAACK,GAAG,CAAC,CAACC,WAA0B,EAAEC,GAAO,KAAK;QAC9E,oBACEhB,OAAA,CAACF,IAAI;UAACoB,IAAI,EAAEH;QAAY,GAAMC,GAAG;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAEzC,CAAC;IAAC,gBACF,CAAC;EACJ,CAAC;AACV,CAAC;AAAAE,EAAA,GA3CYrB,IAAI;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}