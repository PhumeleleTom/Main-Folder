{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Downloads\\\\Main-folder\\\\frontend\\\\src\\\\components\\\\TaskList.tsx\";\nimport React from 'react';\nimport { Task } from './Task';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskList = props => {\n  var _props$data3, _props$data3$content;\n  if (props.work) {\n    var _props$data, _props$data$content;\n    console.log(\"work\");\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [((_props$data = props.data) === null || _props$data === void 0 ? void 0 : (_props$data$content = _props$data.content) === null || _props$data$content === void 0 ? void 0 : _props$data$content.length) > 0 && props.data.map((currentTask, key) => {\n        if (!currentTask.taskCompleted) {\n          return /*#__PURE__*/_jsxDEV(Task, {\n            task: currentTask\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 20\n          }, this);\n        }\n      }), \";\"]\n    }, void 0, true);\n  }\n  if (props.completed) {\n    var _props$data2, _props$data2$content;\n    console.log(\"completed\");\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: ((_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : (_props$data2$content = _props$data2.content) === null || _props$data2$content === void 0 ? void 0 : _props$data2$content.length) > 0 && props.data.map((currentTask, key) => {\n        if (currentTask.taskCompleted) {\n          return /*#__PURE__*/_jsxDEV(Task, {\n            task: currentTask\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 20\n          }, this);\n        }\n      })\n    }, void 0, false);\n  }\n  console.log(\"all\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: ((_props$data3 = props.data) === null || _props$data3 === void 0 ? void 0 : (_props$data3$content = _props$data3.content) === null || _props$data3$content === void 0 ? void 0 : _props$data3$content.length) > 0 && props.data.map((currentTask, key) => {\n      return /*#__PURE__*/_jsxDEV(Task, {\n        task: currentTask\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false);\n};\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","Task","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskList","props","_props$data3","_props$data3$content","work","_props$data","_props$data$content","console","log","children","data","content","length","map","currentTask","key","taskCompleted","task","fileName","_jsxFileName","lineNumber","columnNumber","completed","_props$data2","_props$data2$content","_c","$RefreshReg$"],"sources":["C:/Users/User/Downloads/Main-folder/frontend/src/components/TaskList.tsx"],"sourcesContent":["import React from 'react'\r\nimport { deleteTask, saveTask, getTask, updateTask, getTasks } from '../api/TaskService';\r\nimport { TaskInterface } from '../interface/TaskInterface';\r\nimport { Task } from './Task';\r\n\r\ninterface Props{\r\n  work: boolean;\r\n  completed: boolean;\r\n  data: any;\r\n}\r\n\r\nconst TaskList = (props: Props) => {\r\n\r\n  if(props.work){\r\n    console.log(\"work\");\r\n    return (\r\n      <>\r\n        {props.data?.content?.length > 0 && props.data.map((currentTask: TaskInterface, key:any) => {\r\n          if(!currentTask.taskCompleted){\r\n            return <Task task={currentTask} key={key}/>\r\n          }\r\n        })};\r\n      </>\r\n    )\r\n  }\r\n  if(props.completed){\r\n    console.log(\"completed\");\r\n    return (\r\n      <>\r\n        {props.data?.content?.length > 0 && props.data.map((currentTask: TaskInterface, key:any) => {\r\n          if(currentTask.taskCompleted){\r\n            return <Task task={currentTask} key={key} />\r\n          }\r\n        })}\r\n      </>\r\n    )\r\n  }\r\n  console.log(\"all\");\r\n    return (\r\n    <>\r\n      {props.data?.content?.length > 0 && props.data.map((currentTask: TaskInterface, key:any) => {\r\n        return(\r\n          <Task task={currentTask} key={key} />\r\n        ); \r\n      })}\r\n    </>\r\n  )}\r\n\r\nexport default TaskList\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,SAASC,IAAI,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAQ9B,MAAMC,QAAQ,GAAIC,KAAY,IAAK;EAAA,IAAAC,YAAA,EAAAC,oBAAA;EAEjC,IAAGF,KAAK,CAACG,IAAI,EAAC;IAAA,IAAAC,WAAA,EAAAC,mBAAA;IACZC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,oBACEX,OAAA,CAAAE,SAAA;MAAAU,QAAA,GACG,EAAAJ,WAAA,GAAAJ,KAAK,CAACS,IAAI,cAAAL,WAAA,wBAAAC,mBAAA,GAAVD,WAAA,CAAYM,OAAO,cAAAL,mBAAA,uBAAnBA,mBAAA,CAAqBM,MAAM,IAAG,CAAC,IAAIX,KAAK,CAACS,IAAI,CAACG,GAAG,CAAC,CAACC,WAA0B,EAAEC,GAAO,KAAK;QAC1F,IAAG,CAACD,WAAW,CAACE,aAAa,EAAC;UAC5B,oBAAOnB,OAAA,CAACF,IAAI;YAACsB,IAAI,EAAEH;UAAY,GAAMC,GAAG;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAC7C;MACF,CAAC,CAAC,EAAC,GACL;IAAA,eAAE,CAAC;EAEP;EACA,IAAGpB,KAAK,CAACqB,SAAS,EAAC;IAAA,IAAAC,YAAA,EAAAC,oBAAA;IACjBjB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IACxB,oBACEX,OAAA,CAAAE,SAAA;MAAAU,QAAA,EACG,EAAAc,YAAA,GAAAtB,KAAK,CAACS,IAAI,cAAAa,YAAA,wBAAAC,oBAAA,GAAVD,YAAA,CAAYZ,OAAO,cAAAa,oBAAA,uBAAnBA,oBAAA,CAAqBZ,MAAM,IAAG,CAAC,IAAIX,KAAK,CAACS,IAAI,CAACG,GAAG,CAAC,CAACC,WAA0B,EAAEC,GAAO,KAAK;QAC1F,IAAGD,WAAW,CAACE,aAAa,EAAC;UAC3B,oBAAOnB,OAAA,CAACF,IAAI;YAACsB,IAAI,EAAEH;UAAY,GAAMC,GAAG;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAC9C;MACF,CAAC;IAAC,gBACF,CAAC;EAEP;EACAd,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;EAChB,oBACAX,OAAA,CAAAE,SAAA;IAAAU,QAAA,EACG,EAAAP,YAAA,GAAAD,KAAK,CAACS,IAAI,cAAAR,YAAA,wBAAAC,oBAAA,GAAVD,YAAA,CAAYS,OAAO,cAAAR,oBAAA,uBAAnBA,oBAAA,CAAqBS,MAAM,IAAG,CAAC,IAAIX,KAAK,CAACS,IAAI,CAACG,GAAG,CAAC,CAACC,WAA0B,EAAEC,GAAO,KAAK;MAC1F,oBACElB,OAAA,CAACF,IAAI;QAACsB,IAAI,EAAEH;MAAY,GAAMC,GAAG;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAEzC,CAAC;EAAC,gBACF,CAAC;AACJ,CAAC;AAAAI,EAAA,GAnCEzB,QAAQ;AAqCd,eAAeA,QAAQ;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}